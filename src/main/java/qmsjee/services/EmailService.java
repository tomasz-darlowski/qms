/*


 */
package qmsjee.services;

import java.io.File;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.annotation.Resource;
import javax.ejb.Asynchronous;
import javax.enterprise.context.ApplicationScoped;
import javax.faces.context.FacesContext;
import javax.inject.Inject;
import javax.inject.Named;
import javax.mail.Address;
import javax.mail.BodyPart;
import javax.mail.Folder;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.Store;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.servlet.ServletContext;
import qmsjee.classes.Invitation;
import qmsjee.entities.entity.AppUser;
import qmsjee.entities.entity.Event;
import qmsjee.listeners.TaskExecutorListener;
import qmsjee.view.controlers.UserMBean;

/**
 *
 * @author Tomek
 */
@Named("email")
@ApplicationScoped
public class EmailService implements Serializable {

    private static final long serialVersionUID = 7659474902155523484L;
    @Resource(lookup = "java:app/mail/Email")
    private Session mySession;
    private String to;
    private String from;
    private String subject;
    private String body;
    @Inject
    UserMBean userMBean;

    private final static String FOOTER = "   This message is automatically generated by QMS.<br/>\n"
            + "If you think it was sent incorrectly, please contact your QMS administrator<br/>\n"
            + "QMS version 1  2014\n"
            + "\n";

    @Asynchronous
    public void sendInvitations(List<Invitation> recievers, Event event) throws Exception {
        final List<Message> messages = new ArrayList<>();
        for (Invitation invitation : recievers) {
            to = invitation.getUser().getEmail();
            from = "qms.message@gmail.com";
            subject = "Meeting invitation: " + event.getTitle();
            body = prepareInvitationBody(invitation.getUser(), event, invitation.getNote());
            Message message = new MimeMessage(mySession);

            

            message.setFrom(new InternetAddress(from));
            Address toAddress = new InternetAddress(to);
            message.addRecipient(Message.RecipientType.TO, toAddress);
            message.setSubject(subject);
            message.setContent(prepareFinalContent(body));
            messages.add(message);
        }
        TaskExecutorListener.submitTask(new Runnable() {
            @Override
            public void run() {
                for (Message message : messages) {
                    try {
                        Transport.send(message);
                    } catch (MessagingException ex) {
                        Logger.getLogger(EmailService.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }

        });

    }

    @Asynchronous
    public void resendInvitations(Event event) throws Exception {
        final List<Message> messages = new ArrayList<>();
        
        for (AppUser user : event.getHearings()) {
            to = user.getEmail();
            from = "qms.message@gmail.com";
            subject = "Meeting invitation: " + event.getTitle() + " UPDATE !!!";
            
            Message message = new MimeMessage(mySession);
            body = resendInvitationBody(user, event);
            

            message.setFrom(new InternetAddress(from));
            Address toAddress = new InternetAddress(to);
            message.addRecipient(Message.RecipientType.TO, toAddress);
            message.setSubject(subject);
            message.setContent(prepareFinalContent(body));
            messages.add(message);
        }
        TaskExecutorListener.submitTask(new Runnable() {
            @Override
            public void run() {
                for (Message message : messages) {
                    try {
                        Transport.send(message);
                    } catch (MessagingException ex) {
                        Logger.getLogger(EmailService.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }

        });
    }

    @Asynchronous
    public void sendReminder(AppUser usr, String newpass) throws Exception {
        body = preparePasswordResetBody(newpass);
        to = usr.getEmail();
        from = "qms.message@gmail.com";
        subject = "Password reset";

        final Message message = new MimeMessage(mySession);

        message.setFrom(new InternetAddress(from));
        Address toAddress = new InternetAddress(to);
        message.addRecipient(Message.RecipientType.TO, toAddress);
        message.setSubject(subject);
        message.setContent(prepareFinalContent(body));

        TaskExecutorListener.submitTask(new Runnable() {
            @Override
            public void run() {
                try {
                    Transport.send(message);
                } catch (MessagingException ex) {
                    Logger.getLogger(EmailService.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        });

        Transport.send(message);

    }

    private Multipart prepareFinalContent(String text) throws MessagingException {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        String relativeWebPath = "/resources/img/logosmall.png";
        ServletContext servletContext = (ServletContext) facesContext.getExternalContext().getContext();
        String absoluteDiskPath = servletContext.getRealPath(relativeWebPath);

        MimeMultipart multipart = new MimeMultipart();
        BodyPart messageBodyPart = new MimeBodyPart();
        String htmlText = body;
        messageBodyPart.setContent(htmlText, "text/html");
        multipart.addBodyPart(messageBodyPart);

        messageBodyPart = new MimeBodyPart();
        DataSource fds = new FileDataSource(absoluteDiskPath);
        messageBodyPart.setDataHandler(new DataHandler(fds));
        messageBodyPart.setHeader("Content-ID", "<image>");
        multipart.addBodyPart(messageBodyPart);

        return multipart;
    }

    private String prepareInvitationBody(AppUser reciever, Event event, String note) {
        String body = "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n"
                + "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n"
                + " <head>\n"
                + "  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n"
                + "  <title>Demystifying Email Design</title>\n"
                + "  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n"
                + "</head>\n"
                + "<body style=\"margin: 0; padding: 0; font-family: 'Verdana'; font-size: 14px\">\n"
                + " <table align=\"center\" border=\"1\" cellpadding=\"0\" cellspacing=\"0\" width=\"600\">\n"
                + " <tr>\n"
                + "  <td align=\"left\" bgcolor=\"#ffffff\" style=\"padding: 0 0 0 0;\">\n"
                + " <img src=\"cid:image\" alt=\"QMS Logo\" width=\"150\" height=\"73\" style=\"display: block;\" />\n"
                + "</td>\n"
                + " </tr>\n"
                + " <tr>\n"
                + "  <td bgcolor=\"#057D9F\" style=\"padding: 30px 10px 30px 10px;\">\n"
                + "   <table border=\"1\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n"
                + "  <tr>\n"
                + "   <td bgcolor=\"#eeeeee\" style=\"padding: 0 10px 0 10px;\">\n"
                + "    <h2 style=\"margin-bottom: 0\">Meeting invitation</h2>\n"
                + "	<b>Invitation send by: </b><a href=\"mailto:" + userMBean.getUser().getEmail() + "\" style=\"color: #000000;\"><font color=\"#000000\">"
                + userMBean.getUser().getName() + " " + userMBean.getUser().getSurname() + "</font></a>\n"
                + "   </td>\n"
                + "  </tr>\n"
                + "  <tr>\n"
                + "   <td bgcolor=\"#eeeeee\" style=\"padding: 10px 10px 10px 10px;\">\n"
                + "    <b>Meeting theme: </b>" + event.getTitle() + "<br/>\n"
                + "	<b>From: </b>" + event.getDateFrom().toString() + "<br/>\n"
                + "	<b>To: </b>" + event.getDateTo().toString() + "<br/>\n"
                + "	<b>Note: </b>" + note + " </td>\n"
                + "  </tr>\n"
                + " </table>\n"
                + "  </td>\n"
                + " </tr>\n"
                + " <tr>\n"
                + "  <td bgcolor=\"#eeeeee\" align=\"center\" style=\"font-size: 12px; padding: 0 10px 0 10px;\">\n"
                + FOOTER
                + "  </td>\n"
                + " </tr>\n"
                + "</table>\n"
                + "</body>\n"
                + "</html>";

        return body;
    }

    private String resendInvitationBody(AppUser reciever, Event event) {
        String body = "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n"
                + "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n"
                + " <head>\n"
                + "  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n"
                + "  <title>Demystifying Email Design</title>\n"
                + "  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n"
                + "</head>\n"
                + "<body style=\"margin: 0; padding: 0; font-family: 'Verdana'; font-size: 14px\">\n"
                + " <table align=\"center\" border=\"1\" cellpadding=\"0\" cellspacing=\"0\" width=\"600\">\n"
                + " <tr>\n"
                + "  <td align=\"left\" bgcolor=\"#ffffff\" style=\"padding: 0 0 0 0;\">\n"
                + " <img src=\"cid:image\" alt=\"QMS Logo\" width=\"150\" height=\"73\" style=\"display: block;\" />\n"
                + "</td>\n"
                + " </tr>\n"
                + " <tr>\n"
                + "  <td bgcolor=\"#057D9F\" style=\"padding: 30px 10px 30px 10px;\">\n"
                + "   <table border=\"1\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n"
                + "  <tr>\n"
                + "   <td bgcolor=\"#eeeeee\" style=\"padding: 0 10px 0 10px;\">\n"
                + "    <h2 style=\"margin-bottom: 0\">Meeting invitation</h2>\n"
                + "	<b>Invitation send by: </b><a href=\"mailto:" + userMBean.getUser().getEmail() + "\" style=\"color: #000000;\"><font color=\"#000000\">"
                + userMBean.getUser().getName() + " " + userMBean.getUser().getSurname() + "</font></a>\n"
                + "   </td>\n"
                + "  </tr>\n"
                + "  <tr>\n"
                + "   <td bgcolor=\"#eeeeee\" style=\"padding: 10px 10px 10px 10px;\">\n"
                + "    <b>Meeting theme: </b>" + event.getTitle() + "<br/>\n"
                + "	<b>From: </b>" + event.getDateFrom().toString() + "<br/>\n"
                + "	<b>To: </b>" + event.getDateTo().toString() + "<br/>\n"
                + "  </tr>\n"
                + " </table>\n"
                + "  </td>\n"
                + " </tr>\n"
                + " <tr>\n"
                + "  <td bgcolor=\"#eeeeee\" align=\"center\" style=\"font-size: 12px; padding: 0 10px 0 10px;\">\n"
                + FOOTER
                + "  </td>\n"
                + " </tr>\n"
                + "</table>\n"
                + "</body>\n"
                + "</html>";

        return body;
    }

    private String preparePasswordResetBody(String newpass) {
        String body = "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n"
                + "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n"
                + " <head>\n"
                + "  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n"
                + "  <title>Demystifying Email Design</title>\n"
                + "  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n"
                + "</head>\n"
                + "<body style=\"margin: 0; padding: 0; font-family: 'Verdana'; font-size: 14px\">\n"
                + " <table align=\"center\" border=\"1\" cellpadding=\"0\" cellspacing=\"0\" width=\"600\">\n"
                + " <tr>\n"
                + "  <td align=\"left\" bgcolor=\"#ffffff\" style=\"padding: 0 0 0 0;\">\n"
                + " <img src=\"cid:image\" alt=\"QMS Logo\" width=\"150\" height=\"73\" style=\"display: block;\" />\n"
                + "</td>\n"
                + " </tr>\n"
                + " <tr>\n"
                + "  <td bgcolor=\"#057D9F\" style=\"padding: 30px 10px 30px 10px;\">\n"
                + "   <table border=\"1\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n"
                + "  <tr>\n"
                + "   <td bgcolor=\"#eeeeee\" style=\"padding: 0 10px 0 10px;\">\n"
                + "    <h2 style=\"margin-bottom: 0\">Password for QMS application</h2>\n"
                + "	<b>Password send by QMS System</b>"
                + "   </td>\n"
                + "  </tr>\n"
                + "  <tr>\n"
                + "   <td bgcolor=\"#eeeeee\" style=\"padding: 10px 10px 10px 10px;\">\n"
                + "    <b>Your temporary passowrd is '" + newpass + "'<br/>\n"
                + "  </tr>\n"
                + " </table>\n"
                + "  </td>\n"
                + " </tr>\n"
                + " <tr>\n"
                + "  <td bgcolor=\"#eeeeee\" align=\"center\" style=\"font-size: 12px; padding: 0 10px 0 10px;\">\n"
                + FOOTER
                + "  </td>\n"
                + " </tr>\n"
                + "</table>\n"
                + "</body>\n"
                + "</html>";

        return body;
    }

    public List<String> poll() throws Exception {
        long start = System.currentTimeMillis();
        List<String> list = new ArrayList<>();

        Store store = null;
        Folder inbox = null;
        try {
            // List all messages in the INBOX
            store = mySession.getStore();
            store.connect();

            inbox = store.getFolder("INBOX");

            inbox.open(Folder.READ_WRITE);

            Message[] messages = inbox.getMessages();
            for (Message m : messages) {
                System.out.println("Message subject:" + m.getSubject());
                list.add(m.getSubject());
            }
        } catch (Exception ex) {
            System.out.println("Unknown error occured:" + ex.getMessage());
        } finally {
            try {
                if (null != inbox) {
                    inbox.close(true);
                }
                if (null != store) {
                    store.close();
                }
            } catch (Exception ex) {
                System.out.println("Unable to close IMAP store connection");
            }
        }

        long end = System.currentTimeMillis();
        long diff = end - start;
        System.out.println("Found [" + list.size() + "] messages. In [" + diff + "] millis.");
        return list;
    }

    //<editor-fold defaultstate="collapsed" desc="Setters and getters">
    public String getTo() {
        return to;
    }

    public void setTo(String to) {
        this.to = to;
    }

    public String getFrom() {
        return from;
    }

    public void setFrom(String from) {
        this.from = from;
    }

    public String getSubject() {
        return subject;
    }

    public void setSubject(String subject) {
        this.subject = subject;
    }

    public String getBody() {
        return body;
    }

    public void setBody(String body) {
        this.body = body;
    }
    //</editor-fold>
}
